moduleName: APIUtils
functionalDesigns:
- goal: Provide utility functions for interacting with the backend API to fetch, create, update, and delete projects and modules.
  elements:
  - name: "API_BASE_URL"
    lines:
    - 3
    - 3
    elementType: constant
    goal: Store the base URL for the backend API
    access: private
    output: "A string representing the base URL for the backend API"
  - name: "Project"
    lines:
    - 5
    - 10
    elementType: interface
    goal: Define the structure of a Project object
    access: public
    properties:
    - id
    - name
    - createdAt
    - updatedAt
  - name: "Module"
    lines:
    - 12
    - 20
    elementType: interface
    goal: Define the structure of a Module object
    access: public
    properties:
    - id
    - projectId
    - parentId
    - name
    - details
    - createdAt
    - updatedAt
  - name: "fetchProjects()"
    lines:
    - 22
    - 25
    elementType: function
    goal: Fetch all projects from the backend API
    access: public
    output: "A Promise that resolves to an array of Project objects"
    functionalBlocks:
    - Send a GET request to the API endpoint for fetching projects
    - Return the response data as an array of Project objects
  - name: "fetchModules(projectId: number)"
    lines:
    - 27
    - 30
    elementType: function
    goal: Fetch all modules for a specific project from the backend API
    access: public
    output: "A Promise that resolves to an array of Module objects"
    functionalBlocks:
    - Send a GET request to the API endpoint for fetching modules of a specific project
    - Return the response data as an array of Module objects
  - name: "createProject(name: string)"
    lines:
    - 32
    - 35
    elementType: function
    goal: Create a new project with the given name
    access: public
    output: "A Promise that resolves to the created Project object"
    functionalBlocks:
    - Send a POST request to the API endpoint for creating a new project with the
      given name
    - Return the response data as a Project object
  - name: "createModule(projectId: number, parentId: number | null, name: string,
      details: string)"
    lines:
    - 37
    - 40
    elementType: function
    goal: Create a new module for a specific project with the given parentId, name,
      and details
    access: public
    output: "A Promise that resolves to the created Module object"
    functionalBlocks:
    - Send a POST request to the API endpoint for creating a new module for a specific
      project with the given parentId, name, and details
    - Return the response data as a Module object
  - name: "updateModule(projectId: number, moduleId: number, name: string, details:
      string)"
    lines:
    - 42
    - 45
    elementType: function
    goal: Update an existing module with the given name and details
    access: public
    output: "A Promise that resolves to the updated Module object"
    functionalBlocks:
    - Send a PUT request to the API endpoint for updating a specific module with the
      given name and details
    - Return the response data as a Module object
  - name: "deleteModule(projectId: number, moduleId: number)"
    lines:
    - 47
    - 50
    elementType: function
    goal: Delete an existing module
    access: public
    output: "A Promise that resolves to the deleted Module object"
    functionalBlocks:
    - Send a DELETE request to the API endpoint for deleting a specific module
    - Return the response data as a Module object
  packages:
  - "axios"
  dependencies:
  - "src/utils/api.ts"
  filePath: src/utils/api.ts